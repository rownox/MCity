@page "/learn"
@page "/learn/{TopicId:int}/{PageId:int}"
@inject ILearnPageService LearnPageService
@inject ILearnTopicService LearnTopicService
@inject ILearnPageState LearnPageState
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Learn</PageTitle>

@if (ErrorMessage != null) {
   <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="learn-ctnr">
   <div class="side-nav">
      <div class="topic-header-ctnr">
         <p class="title">Learn Topics</p>
         <input type="search" class="search" placeholder="Search Topics" />
      </div>
      @if (LearnTopics != null) {
         <ul class="topics-ctnr">
            @foreach (var topic in LearnTopics) {
               <TopicTreeItem Topic="topic" />
            }
         </ul>
      } else {
         <p>Loading...</p>
      }
      <CreateTopicButton />
   </div>
   <div class="content">
      @if (SelectedPage == null) {
         <LearnHome />
      } else {
         if (SelectedPage.LearnTopic != null) {
            <p class="title">@SelectedPage.LearnTopic.Title - @SelectedPage.Title</p>
            @if (SelectedPage.Content == null) {
               <ContentNotFound Id="@SelectedPage.Id" />
            } else {
               <div class="section filler break">
                  <p class="subtitle">@SelectedPage.Content</p>
               </div>
               <div class="section break">
                  <p class="title">Sources</p>
                  <p class="subtitle">@SelectedPage.Source</p>
               </div>
               <div class="section">
                  <p>Last Edited By: @SelectedPage.LastEditedBy - @SelectedPage.LastEdited</p>
               </div>
               <EditPageButton Id="@SelectedPage.Id" />
            }
         }
      }
   </div>
</div>

@code {
   private List<LearnTopic> LearnTopics { get; set; } = new List<LearnTopic>();
   [Parameter] public int? TopicId { get; set; }
   [Parameter] public int? PageId { get; set; }
   private string? ErrorMessage { get; set; }

   private LearnPage? SelectedPage => LearnPageState.SelectedPageId.HasValue
       ? FindPage(LearnTopics, LearnPageState.SelectedPageId.Value)
       : null;

   protected override async Task OnInitializedAsync() {
      try {
         LearnTopics = await LearnTopicService.GetTopLevelTopics();
      } catch (Exception ex) {
         ErrorMessage = $"An error occurred while loading topics: {ex.Message}";
         Console.WriteLine($"Error details: {ex}");
      }
   }

   protected override void OnParametersSet() {
      try {
         if (LearnTopics != null && TopicId.HasValue && PageId.HasValue) {
            var topic = FindTopic(LearnTopics, TopicId.Value);
            if (topic != null) {
               var page = topic.Pages.FirstOrDefault(p => p.Id == PageId.Value);
               if (page != null) {
                  LearnPageState.SelectedPageId = page.Id;
                  LearnPageState.OpenTopicIds.Add(topic.Id);
                  if (topic.ParentTopic != null) {
                     openAllRelatedTopics(topic.ParentTopic.Id);
                  }
               }
            }
         }
      } catch (Exception ex) {
         ErrorMessage = $"An error occurred while setting parameters: {ex.Message}";
         Console.WriteLine($"Error details: {ex}");
      }
   }

   private void openAllRelatedTopics(int id) {
      var topic = FindTopic(LearnTopics, id);
      LearnPageState.OpenTopicIds.Add(id);

      if (topic != null) {
         if (topic.ParentTopic != null) {
            openAllRelatedTopics(topic.ParentTopic.Id);
         }
      }
   }

   private void SelectPage(int pageId) {
      LearnPageState.SelectedPageId = pageId;
      var selectedPage = FindPage(LearnTopics, pageId);
      if (selectedPage?.LearnTopic != null) {
         NavigationManager.NavigateTo($"/learn/{selectedPage.LearnTopic.Id}/{pageId}");
      }
   }

   private LearnTopic? FindTopic(List<LearnTopic> topics, int topicId) {
      foreach (var topic in topics) {
         if (topic.Id == topicId) {
            return topic;
         }
         var subTopic = FindTopic(topic.SubTopics, topicId);
         if (subTopic != null) {
            return subTopic;
         }
      }
      return null;
   }

   private LearnPage? FindPage(List<LearnTopic> topics, int pageId) {
      foreach (var topic in topics) {
         var page = topic.Pages.FirstOrDefault(p => p.Id == pageId);
         if (page != null) {
            return page;
         }
         var subPage = FindPage(topic.SubTopics, pageId);
         if (subPage != null) {
            return subPage;
         }
      }
      return null;
   }
}