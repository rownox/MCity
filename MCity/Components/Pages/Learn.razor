@page "/learn"
@page "/learn/{topicId:int?}/{pageId:int?}"
@inject ILearnPageService LearnPageService
@inject ILearnTopicService LearnTopicService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<div class="learn-ctnr">
    <div class="side-nav">
        @if (learnTopics == null) {
            <p>Loading...</p>
        } else if (learnTopics.Count == 0) {
            <p>No Pages Found.</p>
        } else {
            <ul>
                @foreach (var topic in learnTopics) {
                    <div class="topic" @key="topic.Id">
                        <div class="title" @onclick="@(() => ToggleSubset(topic.Id))">
                            <p>@topic.Title</p>
                            <p id="drop-icon">@GetDropIcon(topicVisible[topic.Id])</p>
                        </div>
                        <div class="subset" style="@GetSubsetStyle(topicVisible[topic.Id])">
                            <a class="sub-item @(IsActivePage(topic.HomePage) ? "active" : "")"
                               href="/learn/@topic.Id/@topic.HomePage">
                                @pageLookup[topic.HomePage]?.Title
                            </a>
                            @if (topicPages.ContainsKey(topic.Id)) {
                                @foreach (var subitem in topicPages[topic.Id]) {
                                    <a class="sub-item @(IsActivePage(subitem.Id) ? "active" : "")"
                                       @key="subitem.Id" href="/learn/@topic.Id/@subitem.Id">
                                        @subitem.Title
                                    </a>
                                }
                            }
                        </div>
                    </div>
                }
            </ul>
        }
    </div>
    <div class="content">
        @if (selectedPage == null) {
            <p>Home</p>
        } else {
            <p class="title">@selectedPage.Title</p>

            <div class="section filler break">
                <p class="subtitle">@selectedPage.Content</p>
            </div>

            <div class="section filler break">
                <p class="title">Sources</p>
                <p class="subtitle">@selectedPage.Source</p>

            </div>
            <div class="section">
                <p>Last Edited By: @selectedPage.LastEditedBy - @selectedPage.LastEdited</p>
            </div>
        }
    </div>
</div>

@code {
    private LearnPage? selectedPage = null;
    private int? activePageId = null;
    private int? activeTopicId = null;

    private List<LearnPage>? learnPages = null;
    private List<LearnTopic>? learnTopics = null;
    private Dictionary<int, bool> topicVisible = new Dictionary<int, bool>();
    private Dictionary<int, List<LearnPage>> topicPages = new Dictionary<int, List<LearnPage>>();
    private Dictionary<int, LearnPage> pageLookup = new Dictionary<int, LearnPage>();

    [Parameter]
    public int? topicId { get; set; }

    [Parameter]
    public int? pageId { get; set; }

    protected override async Task OnInitializedAsync() {
        learnPages = await LearnPageService.GetAllPages();
        learnTopics = await LearnTopicService.GetAllTopics();

        foreach (var page in learnPages) {
            pageLookup[page.Id] = page;
        }

        foreach (var topic in learnTopics) {
            topicVisible[topic.Id] = false;
            if (topic.Pages != null) {
                var subTopicIds = topic.Pages.Split(", ").Select(int.Parse).ToList();
                topicPages[topic.Id] = subTopicIds.Select(id => pageLookup[id]).ToList();
            }
        }
    }

    protected override async Task OnParametersSetAsync() {
        if (topicId.HasValue) {
            ToggleSubset(topicId.Value);
            activeTopicId = topicId.Value;
        }

        if (pageId.HasValue) {
            SelectPage(pageId.Value);
        }
    }

    private void ToggleSubset(int id) {
        topicVisible[id] = !topicVisible[id];
    }

    private void SelectPage(int id) {
        selectedPage = pageLookup.GetValueOrDefault(id);
        activePageId = id;
    }

    private bool IsActivePage(int id) {
        return activePageId == id;
    }

    private string GetSubsetStyle(bool isVisible) {
        return isVisible ? "display: flex;" : "display: none;";
    }

    private string GetDropIcon(bool isVisible) {
        return isVisible ? "⯆" : "⯈";
    }
}
